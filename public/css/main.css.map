{"version":3,"sources":["base/_base.scss","base/_color.scss","components/_CommitApp.scss","utils/_flexbox.scss","components/_AppHeader.scss","base/_spacing.scss","base/_type.scss","components/_CommitHistory.scss","components/_CommitEntry.scss","components/_CommitDetail.scss","components/_CommitThread.scss","components/_ThreadForm.scss","components/_ThreadComment.scss","utils/_utility.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["html,body{\n  margin: 0;\n  padding: 0;\n\twidth: 100%;\n\tfont-family: OpenSans, Helvetica;\n\tfont-size: 62.5%;\n\t\t\n\tbackground-color: $off-white;\n}\n\n.hidden{\n\tdisplay: none;\n}\n\np{\n\tmargin: 0;\n}\n","$orange: #FF7C5C;\n$blue: #536dfe;\n$dark-blue: #1B435A;\n$off-white: #f8f8f6;\n$grey: #444;","#app{\n\t@include flexbox;\n\t@include flex-dir(column);\n\t@include flex-wrap(nowrap);\n\t@include align-items(center);\t\n}","// Flexbox Mixins\n// http://philipwalton.github.io/solved-by-flexbox/\n// https://github.com/philipwalton/solved-by-flexbox\n// \n// Copyright (c) 2013 Brian Franco\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// This is a set of mixins for those who want to mess around with flexbox\n// using the native support of current browsers. For full support table\n// check: http://caniuse.com/flexbox\n//\n// Basically this will use:\n//\n// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)\n// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)\n//\n// This was inspired by:\n// \n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n// \n// With help from:\n// \n// * http://w3.org/tr/css3-flexbox/\n// * http://the-echoplex.net/flexyboxes/\n// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx\n// * http://css-tricks.com/using-flexbox/\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes\n\n//----------------------------------------------------------------------\n\n// Flexbox Containers\n//\n// The 'flex' value causes an element to generate a block-level flex\n// container box.\n//\n// The 'inline-flex' value causes an element to generate a inline-level\n// flex container box. \n//\n// display: flex | inline-flex\n//\n// http://w3.org/tr/css3-flexbox/#flex-containers\n//\n// (Placeholder selectors for each type, for those who rather @extend)\n\n@mixin flexbox {\n\tdisplay: -webkit-box;\n\tdisplay: -webkit-flex;\n\tdisplay: -moz-flex;\n\tdisplay: -ms-flexbox;\n\tdisplay: flex;\n}\n\n%flexbox { @include flexbox; }\n\n//----------------------------------\n\n@mixin inline-flex {\n\tdisplay: -webkit-inline-box;\n\tdisplay: -webkit-inline-flex;\n\tdisplay: -moz-inline-flex;\n\tdisplay: -ms-inline-flexbox;\n\tdisplay: inline-flex;\n}\n\n%inline-flex { @include inline-flex; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in. \n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n\t@if $value == row-reverse {\n\t\t-webkit-box-direction: reverse;\n\t\t-webkit-box-orient: horizontal;\n\t} @else if $value == column {\n\t\t-webkit-box-direction: normal;\n\t\t-webkit-box-orient: vertical;\n\t} @else if $value == column-reverse {\n\t\t-webkit-box-direction: reverse;\n\t\t-webkit-box-orient: vertical;\n\t} @else {\n\t\t-webkit-box-direction: normal;\n\t\t-webkit-box-orient: horizontal;\n\t}\n\t-webkit-flex-direction: $value;\n\t-moz-flex-direction: $value;\n\t-ms-flex-direction: $value;\n\tflex-direction: $value;\n}\n\t// Shorter version:\n\t@mixin flex-dir($args...) { @include flex-direction($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in. \n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n\t// No Webkit Box fallback.\n\t-webkit-flex-wrap: $value;\n\t-moz-flex-wrap: $value;\n\t@if $value == nowrap {\n\t\t-ms-flex-wrap: none;\n\t} @else { \n\t\t-ms-flex-wrap: $value; \n\t}\n\tflex-wrap: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap> \n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow($values: (row nowrap)) {\n\t// No Webkit Box fallback.\n\t-webkit-flex-flow: $values;\n\t-moz-flex-flow: $values;\n\t-ms-flex-flow: $values;\n\tflex-flow: $values;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n\t-webkit-box-ordinal-group: $int + 1;\n\t-webkit-order: $int;\n\t-moz-order: $int;\n\t-ms-flex-order: $int;\n\torder: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n\t-webkit-box-flex: $int;\n\t-webkit-flex-grow: $int;\n\t-moz-flex-grow: $int;\n\t-ms-flex-positive: $int;\n\tflex-grow: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n\t-webkit-flex-shrink: $int;\n\t-moz-flex-shrink: $int;\n\t-ms-flex-negative: $int;\n\tflex-shrink: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. \n//\n// Values: Like \"width\" \n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n\t-webkit-flex-basis: $value;\n\t-moz-flex-basis: $value;\n\t-ms-flex-preferred-size: $value;\n\tflex-basis: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n    \n\t// Set a variable to be used by box-flex properties\n\t$fg-boxflex: $fg;\n\n\t// Box-Flex only supports a flex-grow value so let's grab the\n\t// first item in the list and just return that.\n\t@if type-of($fg) == 'list' {\n\t\t$fg-boxflex: nth($fg, 1);\n\t}\n\n\t-webkit-box-flex: $fg-boxflex;\n\t-webkit-flex: $fg $fs $fb;\n\t-moz-box-flex: $fg-boxflex;\n\t-moz-flex: $fg $fs $fb;\n\t-ms-flex: $fg $fs $fb;\n\tflex: $fg $fs $fb;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n\t@if $value == flex-start {\n\t\t-webkit-box-pack: start;\n\t\t-ms-flex-pack: start;\n\t} @else if $value == flex-end {\n\t\t-webkit-box-pack: end;\n\t\t-ms-flex-pack: end;\n\t} @else if $value == space-between {\n\t\t-webkit-box-pack: justify;\n\t\t-ms-flex-pack: justify;\n\t} @else if $value == space-around {\n\t\t-ms-flex-pack: distribute;\t\t\n\t} @else {\n\t\t-webkit-box-pack: $value;\n\t\t-ms-flex-pack: $value;\n\t}\n\t-webkit-justify-content: $value;\n\t-moz-justify-content: $value;\n\tjustify-content: $value;\n}\n\t// Shorter version:\n\t@mixin flex-just($args...) { @include justify-content($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.) \n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n\t@if $value == flex-start {\n\t\t-webkit-box-align: start;\n\t\t-ms-flex-align: start;\n\t} @else if $value == flex-end {\n\t\t-webkit-box-align: end;\n\t\t-ms-flex-align: end;\n\t} @else {\n\t\t-webkit-box-align: $value;\n\t\t-ms-flex-align: $value;\n\t}\n\t-webkit-align-items: $value;\n\t-moz-align-items: $value;\n\talign-items: $value;\n}\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n\t// No Webkit Box Fallback.\n\t-webkit-align-self: $value;\n\t-moz-align-self: $value;\n\t@if $value == flex-start {\n\t\t-ms-flex-item-align: start;\n\t} @else if $value == flex-end {\n\t\t-ms-flex-item-align: end;\n\t} @else {\n\t\t-ms-flex-item-align: $value;\n\t}\n\talign-self: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n\t// No Webkit Box Fallback.\n\t-webkit-align-content: $value;\n\t-moz-align-content: $value;\n\t@if $value == flex-start {\n\t\t-ms-flex-line-pack: start;\n\t} @else if $value == flex-end {\n\t\t-ms-flex-line-pack: end;\n\t} @else {\n\t\t-ms-flex-line-pack: $value;\n\t}\n\talign-content: $value;\n}","header{\n\twidth: 100%;\n\theight: spacing(4);\n\tmargin: 0;\n\tpadding-left: spacing(1);\n\tpadding-right: spacing(2);\n\t\n\tbackground-color: $orange;\n\tcolor: white;\n\tbox-shadow: 0 1px 5px #ccc;\n}\n\nheader .title{\n\t@include type-setting(3);\n}","$base-spacing: 2rem;\n\n@function spacing($level) {\n  @return (((0.5 * $level) + 1) * $base-spacing);\n}\n","// font and line height consistency\n$base-font-size: 1rem;\n$base-line-height: 2 * $base-font-size;\n\n$type-settings: (\n  -1: (\n    font-size: 2/3 * $base-font-size,\n    line-height: 1 * $base-line-height\n  ),\n  0: (\n    font-size: 3/3 * $base-font-size,\n    line-height: 1 * $base-line-height\n  ),\n  1: (\n    font-size: 4/3 * $base-font-size,\n    line-height: 2 * $base-line-height\n  ),\n  2: (\n    font-size: 5/3 * $base-font-size,\n    line-height: 2 * $base-line-height\n  ),\n\t3: (\n    font-size: 6/3 * $base-font-size,\n    line-height: 3 * $base-line-height\n  ),\n\t4: (\n    font-size: 7/3 * $base-font-size,\n    line-height: 3 * $base-line-height\n  )\n);\n\n@function type-scale($level) {\n  @return map-get(\n    map-get($type-settings, $level), 'font-size');\n}\n\n@function line-height($level) {\n  @return map-get(\n    map-get($type-settings, $level), 'line-height');\n}\n\n@mixin type-setting($level) {\n  font-size: type-scale($level);\n  line-height: line-height($level);\n}",".history{\n\tmargin: 0;\n\tpadding: 0;\n\tposition: relative;\n\t\n\tmax-width: 50rem;\n}\n\n.history .title{\n\tmargin-top: spacing(0);\n\t@include type-setting(2);\n\tcolor: $grey;\n}",".commit{\n\tmargin: 0;\n\tmargin-top: spacing(0);\n\twidth: 50rem; // shitty width, fix later\n}\n\n.entry{\n\twidth: 100%;\n\tmargin: 0;\n\tpadding: spacing(0);\n\t\n\t@include flexbox;\n\t@include flex-dir(row);\n\t@include flex-wrap(wrap);\n\t@include flex-just(space-between);\t\n\t\n\t@include type-setting(2);\n\tbackground-color: white;\n\tbox-shadow: 0 1px .3rem #ccc;\n}\n\n.entry .msg{\n\twidth: 100%;\n\tmargin: 0;\n\tcolor: $blue;\n}\n\n.entry .date{\n\tmargin: 0;\n\tcolor: $grey;\n}\n\n.entry .detail-button{\n\tpadding: 0;\n\theight: spacing(2);\n\tborder: 0;\n\t\n\tbackground-color: white;\n\tcolor: $grey;\n\tfont-size: 2 * $base-font-size;\n}",".detail{\n\t@include type-setting(0);\t\n\tword-break: break-all;\n}",".thread{\n\twidth: 100%;\n\tpadding: spacing(0);\n\t\n\tbackground-color: $off-white;\n\tbox-shadow: inset 0 0 .3rem #ccc;\n}\n\n.thread ul{\t\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n}\n",".form{\n\t@include type-setting(1);\n\t@include flexbox;\n\t@include flex-dir(row);\n\t@include flex-just(flex-start);\t\n\twidth: 100%;\n\tmargin-top: spacing(-1);\n}\n\n.form input[type='text']{\n\twidth: 100%;\n\tborder: 1px solid #ccc;\n\tborder-radius: 2px 0 0 2px;\n\tcolor: $orange;\n}\n\n.form input[type='submit']{\n\tborder: 1px solid $orange;\n\tbackground-color: white;\n\tborder-radius: 0 2px 2px 0;\n\tcolor: $orange;\n}\n",".comment{\n\theight: spacing(0);\n\tpadding: 0;\n\t\n\tclear: both;\n\t@include clearfix();\n\t\n\tword-break: break-all;\n\t@include type-setting(0);\n\t\n\tcolor: $grey;\n}\n\n.comment p{\n\tfloat: left;\n}\n\n.comment button{\n\tfloat: right;\n\t\n\theight: 100%;\n\t\n\tborder: 0;\n\tborder-radius: 0;\n\n\tbackground-color: $off-white;\n}","@mixin breakpoint($point) {\n  @if $point == large {\n    @media (min-width: 64.375em) { @content; }\n  }\n  @else if $point == medium {\n    @media (min-width: 50em) { @content; }\n  }\n  @else if $point == small {\n    @media (min-width: 37.5em)  { @content; }\n  }\n}\n\n@mixin clearfix() {\n    &:before,\n    &:after {\n        content: \"\";\n        display: table;\n    }\n    &:after {\n        clear: both;\n    }\n}\n\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  $opacity-ie: $opacity * 100;\n  filter: alpha(opacity=$opacity-ie); //IE8\n}\n\n// Requires width or max-width to be set\n@mixin center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n  position: absolute;\n}\n\n@mixin font-size($sizeValue: 12 ){\n  font-size: $sizeValue + px; //fallback for old browsers\n  font-size: (0.125 * $sizeValue) + rem;\n}"],"sourceRoot":"/source/"}